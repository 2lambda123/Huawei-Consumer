<template>
  <div class="container">
    <div class="content">
      <textarea class="content-text" placeholder="点击按钮开始说话" disabled="true">{{resultWord}}</textarea>
    </div>
    <div class="start-container">
      <input class="start-btn" type="button" onclick="startBtnAction" value="{{startBtnText}}"></input>
    </div>
  </div>
</template>

<style>
  .container {
    background-color: #ffffff;
    flex-direction: column;
    align-items: center;
    flex: 1;
  }

  .content {
    height: 80%;
    margin: 20px;
    border: 1px solid #d3d3d3;
    text-align: center;

  }

  .content-text {
    width: 100%;
    height: 100%;
    font-size: 40px;
    padding: 20px;
  }

  .start-container {
    position: fixed;
    flex-direction: column;
    width: 100%;
    height: 100px;
    bottom: 40px;
    align-items: center;
  }

  .start-btn {
    width: 80%;
    height: 100%;
    background-color: #1478fa;
    text-align: center;
    color: #ffffff;
    font-size: 40px;
    border-radius: 10px;
  }
</style>

<script>
  import ai from '@system.ai';
  import { errCodeList } from "../Common/data";
  module.exports = {
    data: {
      isStart: 'false',
      startBtnText: "开始录音",
      resultWord: '',
    },
    onInit() {
      this.$page.setTitleBar({
        text: '语音识别',
        textColor: '#ffffff',
        backgroundColor: '#007DFF',
        backgroundOpacity: 0.5,
        menu: true
      })

    },
    startBtnAction: function () {
      var that = this;
      if (that.isStart === "false") {
        that.isStart = "true";
        that.startBtnText = "停止录音...";
        that.resultWord = '';
        that.onStartSpeeh();
      }
      else {
        that.onStopSpeeh();
      }

    },
    //开始录音
    onStartSpeeh: function () {
      var that = this;
      ai.startRecognize({
        //前端静音检测时间
        fontTime: 3000,
        //后端静音检测时间
        backTime: 4000,
        //超时时间
        totalTime: 20000,
        //用户开始说话回调该函数
        onBeginningOfSpeech: function () {
          console.log("begin speech")
        },
        //返回当前输入语音的能量
        onRmsChanged: function (res) {
          console.log("rms is" + res.rms)
        },
        //引擎检测到用户已经说完后回调该函数
        onEndOfSpeech: function () {
          console.log("end of speech")
          that.isStart = "false";
          that.startBtnText = "开始录音";
        },
        //识别过程中，每解码一个chunk，回调一次
        onPartialResult: function (res) {
          console.log(" start PartialResult is: " + JSON.stringify(res.result))
        },
        //识别结束回调
        onEnd: function () {
          console.log("voice recognization end")
        },
        //成功回调
        success: function (data) {
          var resultStr = '';
          for (var index = 0; index < data.result.length; index++) {
            resultStr += data.result[index].word;
          }
          that.resultWord = resultStr;
        },
        //失败回调
        fail: function (data, code) {
          console.log("handling fail, code: " + code)
          that.resultWord = "errorCode：  " + errCodeList[code];
        }
      })
    },
    //停止录音
    onStopSpeeh: function () {
      var that = this;
      //调用语音识别停止接口
      ai.stopRecognize({
        //停止录音成功回调
        success: function () {
          that.isStart = "false";
          that.startBtnText = "开始录音";
          console.log('stopRecognize success');
        },
        //停止录音失败回调
        fail: function (data, code) {
          console.log("end handling fail, code: " + code);
          that.resultWord = "错误码：  " + errCodeList[code];
        },
        complete: function (msg) {
          console.log("end handling complete")
        }
      })
    }
  }
</script>