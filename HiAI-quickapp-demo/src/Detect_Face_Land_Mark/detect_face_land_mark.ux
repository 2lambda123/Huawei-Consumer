<template>
  <div class="container">
    <stack class="top-container">
      <image class="face-image" src="{{imageUri}}"></image>
      <canvas id="canvas" style="flex: 1; width: {{canvasWidth}}px; height: {{canvasHeight}}px" onclick="select"></canvas>
    </stack>
    <div class="bottom-container">
      <tabs>
        <tab-content class="result-group-container">
          <div class="result-content">
            <div class="result-item-content">
              <list class="result-list" id="list">
                <block for="result_list">
                  <list-item type="result" class="items">
                    <div class="item-li">
                      <text class="item-li-detail">{{$item}}</text>
                    </div>
                  </list-item>
                </block>
              </list>
            </div>
          </div>
        </tab-content>
      </tabs>
    </div>
    <div class="select-container">
      <input class="select-btn" type="button" onclick="select" value="上传图片"></input>
    </div>
    <div class="mark {{isShow}}" onclick="cancel">
      <div class="popup-container {{isShow}} ">
        <text class="popup-text" onclick="selectMedia('takePhoto')">拍照</text>
        <div class="popup-line1"></div>
        <text class="popup-text" onclick="selectMedia('selectImage')">从相册中选择</text>
        <div class="popup-line2"></div>
        <text class="popup-text" onclick="selectMedia('cancel')">取消</text>
      </div>
    </div>
  </div>
</template>

<style>
 @import '../Common/css/common.css';
</style>

<script>
  import ai from '@system.ai';
  import media from '@system.media';
  import image from '@system.image';
  import device from '@system.device';
  import { errCodeList } from "../Common/data";
  module.exports = {
    data: {
      imageUri: "/Common/img/initial_picture_one.png",
      result_list: [],
      isShow: '',
      pointArray: [],
      level: '',
      canvasWidth: '',
      canvasHeight: '',
      ratio: 1,
      isFirst: true,
      screenWidth: '',
      screenHeight: '',
    },

    onInit() {
      this.$page.setTitleBar({ text: '五官特征检测' });
      var that = this;
      //获取屏幕信息
      device.getInfo({
        success: function (ret) {
          console.log('handling success');
          that.screenWidth = ret.screenWidth;
          that.screenHeight = ret.screenHeight;
          that.selectOneImage();
        }
      })

    },
    //选择图片
    select: function () {
      var that = this;
      that.isShow = 'show';
    },  
    //在弹出框中选择取消按钮时，隐藏弹出框
    cancel: function () {
      var that = this;
      that.isShow = '';
    },
    //判定获取图片资源方式是拍照还是从相册中选择，调用media方法获取资源
    selectMedia: function (e) {
      var that = this;
      if (e === "takePhoto") {
        that.takePhoto();
      }
      else if (e === "selectImage") {
        that.selectOneImage();
      }
      else {
        that.cancel();
      }
    },
    //拍摄照片
    takePhoto: function () {
      var that = this;
      that.isShow = '';
      that.takephotobtn().then(function (data) {
        that.caculateRatio(data);
      })
    },
    //从手机相册中选择一张图片
    selectOneImage: function () {
      var that = this;
      that.isShow = '';
      that.pickphotobtn().then(function (data) {
        that.caculateRatio(data);
      })
    },
    //根据图片宽度和高度计算图片压缩比例
    caculateRatio: function (data) {
      var that = this;
      var real_width = data.width;
      var real_height = data.height;
      console.log("real_width" + data.width, "real_height" + data.height);
      //将照片宽高控制在一定范围内
      var caculateHeight = (that.screenHeight / 2040) * 580;
      console.log("caculateHeight" + caculateHeight);
      if (data.height > data.width) {
        var ratio = data.height / caculateHeight;
        data.height = caculateHeight;
        data.width = Math.ceil(data.width / ratio) % 2 !== 0 ? (Math.ceil(data.width / ratio) - 1) : Math.ceil(data.width / ratio);
      }
      else if (real_height < real_width) {
        data.height = caculateHeight;
        var ratio = real_height / data.height;
        data.width = Math.ceil(data.width / ratio) % 2 !== 0 ? (Math.ceil(data.width / ratio) - 1) : Math.ceil(data.width / ratio);
      }
      //计算图片压缩比例，压缩比例=原来的宽度/当前设置的宽度
      that.ratio = (real_width / data.width).toFixed(3);
     
      //设置画布的宽高和图片一样
      that.canvasWidth = data.width;
      that.canvasHeight = data.height;

      var args = [data.uri, 70];
      if (parseFloat(that.ratio) != 1) {
        args.push(that.ratio);
      }
      console.log("compress args-------", args)
      var promise = (that.compressImagebtn).apply({}, args);
      promise.then(function (data) {
        that.imageUri = data.uri;
        console.log("pickphoto image url:" + that.imageUri);
        that.detectFaceLand();
      });
    },
    //获取原始图片
    pickphotobtn: function () {
      var that = this;
      return new Promise(function (resolve, reject) {
        if (that.isFirst === true) {
          //获取图片原始尺寸信息
          image.getImageInfo({
            uri: that.imageUri,
            success: function (imageInfo) {
              //调用promise的回调函数resolve将图片信息提供给then方法
              resolve(imageInfo);
            },
            fail: function (imageInfo, code) {
              console.log("imageInfo: " + imageInfo, "code:" + code);
            }
          })
          that.isFirst = false;
        }
        else {
          media.pickImage({
            success: function (data) {
              //获取图片原始尺寸
              image.getImageInfo({
                uri: data.uri,
                success: function (imageInfo) {
                  //调用promise的回调函数resolve将图片信息提供给then方法
                  resolve(imageInfo);
                },
                fail: function (imageInfo, code) {
                  console.log("imageInfo: " + imageInfo, "code:" + code);
                }
              })
            },
          })
        }
      });
    },
    //获取拍照的原始图片路径
    takephotobtn: function () {
      return new Promise(function (resolve, reject) {
        media.takePhoto({
          success: function (data) {
            //获取图片原始尺寸
              image.getImageInfo({
              uri: data.uri,
              success: function (imageInfo) {
                //调用promise的回调函数resolve将图片信息提供给then方法
                resolve(imageInfo);
              },
              fail: function (imageInfo, code) {
                console.log("imageInfo: " + imageInfo, "code: " + code);
              }
            })
          },
        })
      });
    },
    //压缩图片比例
    compressImagebtn: function (uri, quality, ratio) {
      return new Promise(function (resolve, reject) {
        //缩放图片，quality代表图片质量，ratio代表需要压缩比例
        image.compressImage({
          uri: uri,
          quality: quality,
          ratio: ratio ? ratio : undefined,
          format: "JPEG",
          success: function (compressedImg) {
            console.log(compressedImg.uri);
            //获取经过压缩后的图片信息
            image.getImageInfo({
              uri: compressedImg.uri,
              success: function (compressedImgInfo) {
                if (compressedImgInfo.height % 2 !== 0) {
                  //对图片按顺序执行编辑操作
                  image.applyOperations({
                    uri: compressedImgInfo.uri,
                    //图片裁剪
                    operations: [
                      {
                        action: 'crop',
                        width: compressedImgInfo.width,
                        height: compressedImgInfo.height - 1
                      }
                    ],
                    quality: 70,
                    format: 'JPEG',
                    success: function (data) {
                      //图片裁剪之后，再次获取图片信息，同时调用Promise回调函数resolve
                      image.getImageInfo({
                        uri: data.uri,
                        success: function (operationImgInfo) {
                          //调用promise的回调函数resolve将图片信息提供给then方法
                          resolve(operationImgInfo);
                        },
                        fail: function (operationImgInfo, code) {
                          console.log("handling fail, code=" + code);
                        }
                      })
                    },
                    fail: function (data, code) {
                      console.log("handling fail, code=" + code);
                    }
                  })
                } else {
                  console.log("don't crop");
                  resolve(compressedImgInfo);
                }
              },
              fail: function (compressedImgInfo, code) {
                console.log("compressImagebtn getImageInfo fail, code=" + code);
                reject(compressedImgInfo);
              }
            })
          },
          fail: function (compressedImg, code) {
            console.log("compressImagebtn fail, code=" + code);
          }
        })
      });
    },
    //人脸五官特征方法
    detectFaceLand: function () {
      var that = this;
      that.result_list = [];
      //获得画布
      var clearRect = that.$element("canvas");
      var ctx = clearRect.getContext("2d");
      //清除画布里的内容
      ctx.clearRect(0, 0, that.screenWidth, 800);
      //调用五官检测特征接口，获取五官特征的68个landmark点
      ai.detectFaceLandMark({
        uri: that.imageUri,
        success: function (data) {
          //接口调用成功，返回68个landmark点，将其存放在一个数组中，供下面绘制点时使用
          that.pointArray = data.marks;
          console.log("data.mark:" + JSON.stringify(data.marks));
        },
        fail: function (data, code) {
          that.result_list.push("errorCode:  " + errCodeList[code]);
        },
        complete: function (msg) {
          console.log("detect_face_land_mark handling complete");
          //根据接口返回的68个landmark点标记脸部轮廓位置
          var cans = that.$element('canvas');
          var ctx = cans.getContext("2d");
          for (var i = 0; i < that.pointArray.length; i++) {
            ctx.beginPath();
            ctx.arc(that.pointArray[i].positionF.x, that.pointArray[i].positionF.y, 3, 0, 2 * Math.PI);
            ctx.strokeStyle = "#00ffff";
            ctx.fillStyle = "#00ffff";
            ctx.fill();
          }
        }
      })
    }
  }
</script>